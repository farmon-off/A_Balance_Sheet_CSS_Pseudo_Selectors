
/*Before you get too far into your*/
/*styling, you should make use of the sr-only class.*/
/*You can use CSS to make elements*/
/*with this class completely hidden from*/
/*the visual page, but still be announced by screen readers.*/

/*The CSS you are about to write is*/
/*a common set of properties used to ensure*/
/*elements are completely hidden visually.*/

/*The span[class~="sr-only"] selector will*/
/*select any span element whose class includes sr-only.*/
/*Create that selector, and give it a border property set to 0.*/

/*The CSS clip property is used to define the visible*/
/*portions of an element. Set the span[class~="sr-only"]*/
/*selector to have a clip property of rect(1px, 1px, 1px, 1px). */
/*The clip-path property determines the shape the clip*/
/*property should take. Set the clip-path property to*/
/*the value of inset(50%), forming the clip-path into*/
/*a rectangle within the element.*/

span[class~="sr-only"] {
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    height: 1px !important;
    width: 1px !important;
    position: absolute !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    padding: 0 !important;
    margin: -1px !important;
}

html {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    color: #0a0a23;
}

h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex {
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
}

h1 .flex span:first-of-type {
    font-size: 0.7em;
}

h1 .flex span:last-of-type {
    font-size: 1.2em;
}

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

/*Adding position sticky moved the element into its own stack.*/
/*To ensure your #years element does not get hidden by*/
/*different stacks, add a z-index property set*/
/*to 999 in the #years rule.*/

#years {
    display: flex;
    justify-content: flex-end;
    position: sticky;
    z-index: 999;
    top: 0;
    background: #0a0a23;
    color: #fff;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    margin: 0 -2px;
}

#years span[class] {
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
}

.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
}

/*Create a table selector to target your tables.*/
/*Set the border-collapse property to collapse,*/
/*which will allow cell borders to collapse into*/
/*a single border, instead of a border around*/
/*each cell. Also set the border property to 0*/
/*to hide the borders themselves.*/

table {
    border-collapse: collapse;
    border: 0;
    width: 100%;
    position: relative;
    margin-top: 3rem;
}

table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
}

tbody td {
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem;
}

/*The calc() function is a CSS function that */
/*allows you to calculate a value based on other values.*/
/*For example, you can use it to calculate the width of*/
/*the viewport minus the margin of an element: */
/*          .example {*/
/*               margin: 10px;*/
/*               width: calc(100% - 20px);*/
/*           }*/

tbody th {
    width: calc(100% - 12rem);
}

tr[class="total"] {
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}

tr[class="total"] th {
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

tr.total td {
    text-align: right;
    padding: 0 0.25rem;
}


/*The :nth-of-type() pseudo-selector is used to target*/
/*specific elements based on their order among siblings*/
/*of the same type. Use this pseudo-selector to target*/
/*the third td element within your total table rows.*/
/*Give it a right padding of 0.5rem.*/

tr.total td:nth-of-type(3) {
    padding-right: 0.5rem;
}

tr.total:hover {
    background-color: #99c9ff;
}

td.current {
    font-style: italic;
}

tr.data {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description {
    display: block;
    font-weight: normal;
    font-style: italic;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

tr.data td {
    vertical-align: top;
    padding: 0.3rem 0.25rem 0;
    text-align: right;
}
tr.data td:last-of-type{
    padding-right:0.5rem;
}